# valid query params when requesting recent searches:
  end_time
  expansions
  max_results
  media.fields
  next_token
  pagination_token
  place.fields
  poll.fields
  query
  since_id
  sort_order
  start_time
  tweet.fields
  until_id
  user.fields

# username -> their tweets (including replies)
cache curl "https://api.twitter.com/2/tweets/search/recent?query=from:dog_rates&tweet.fields=attachments&media.fields=url&max_results=10" -H "Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAP3TbQEAAAAAsMOTX0UtaPqUCtwPckAYjajojq4%3D9dI9D5FEXYLzZMNZx0xMBYD1cSY0Iu3jhWf0CtQbyT4HSS4o0e" | jq .

# tweet id -> attachment urls
cache curl "https://api.twitter.com/2/tweets/1515052106465619979?tweet.fields=attachments&media.fields=url&expansions=attachments.media_keys" -H "Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAP3TbQEAAAAAsMOTX0UtaPqUCtwPckAYjajojq4%3D9dI9D5FEXYLzZMNZx0xMBYD1cSY0Iu3jhWf0CtQbyT4HSS4o0e" | jq .

# username -> photo urls
cache curl --silent "https://api.twitter.com/2/tweets/search/recent?query=from:dog_rates&tweet.fields=attachments&media.fields=url&expansions=attachments.media_keys&max_results=10" -H "Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAP3TbQEAAAAAsMOTX0UtaPqUCtwPckAYjajojq4%3D9dI9D5FEXYLzZMNZx0xMBYD1cSY0Iu3jhWf0CtQbyT4HSS4o0e" | ruby -rjson -e 'puts JSON.parse($stdin.read, symbolize_names: true).dig(:includes, :media).filter_map { _1[:url] if _1[:type] == "photo" }'

######################
# username -> unprompted tweets with associated photos
cache curl --silent "https://api.twitter.com/2/tweets/search/recent?query=from:dog_rates+has:media&tweet.fields=attachments&media.fields=url&expansions=attachments.media_keys&max_results=10" -H "Authorization: Bearer AAAAAAAAAAAAAAAAAAAAAP3TbQEAAAAAsMOTX0UtaPqUCtwPckAYjajojq4%3D9dI9D5FEXYLzZMNZx0xMBYD1cSY0Iu3jhWf0CtQbyT4HSS4o0e" \
| ruby -rjson -e '
  BEGIN { puts "<html><body><ul>" }
  END { puts "</ul></body></html>" }

  response = JSON.parse($stdin.read, symbolize_names: true)
  all_photos = response[:includes][:media].select { _1[:type] == "photo" }.to_h { [_1[:media_key], _1[:url]] }
  response[:data]
   .filter_map { |tweet|
     keys = tweet.dig(:attachments, :media_keys) || []
     photos = keys.map(&all_photos)
     { **tweet, photos: photos } if photos.any?
   }
   .each { |tweet|
     puts "<li><p>#{tweet[:text]}</p>"
     tweet[:photos].each { puts "<img src=#{_1.inspect}/>" }
     puts "</li>"
   }
' > dogs.html
